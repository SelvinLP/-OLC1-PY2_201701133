/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,3],$V2=[1,4],$V3=[2,7],$V4=[1,12],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[2,25],$Vb=[2,27],$Vc=[1,33],$Vd=[1,38],$Ve=[2,20],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[12,51,53],$Vp=[1,55],$Vq=[1,53],$Vr=[1,54],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[8,42],$Vy=[2,55],$Vz=[1,75],$VA=[2,51],$VB=[1,93],$VC=[1,94],$VD=[1,95],$VE=[1,96],$VF=[1,97],$VG=[1,98],$VH=[8,16,46,52,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],$VI=[2,53],$VJ=[1,103],$VK=[2,31],$VL=[1,107],$VM=[7,12,23,26,28,29,30,32,33,34,36,51,53,59,60,61,62,63],$VN=[8,16],$VO=[7,64,65,66,67],$VP=[2,42],$VQ=[1,151],$VR=[1,152],$VS=[2,36],$VT=[1,170],$VU=[1,184],$VV=[1,182],$VW=[1,183],$VX=[1,198],$VY=[1,196],$VZ=[1,197];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INICIO":4,"EOF":5,"tk_import":6,"tk_id":7,"tk_puntoycoma":8,"tk_class":9,"tk_llavei":10,"METODOS":11,"tk_llaved":12,"tk_void":13,"tk_pabre":14,"PARAMETROFUNCION":15,"tk_pcierra":16,"SENTENCIA":17,"TIPODATO":18,"CUERPO_SENTENCIA":19,"LISTAID":20,"ASIGNACIONVALOR":21,"ASIGOLLAMADA":22,"tk_if":23,"CONDICION":24,"ELSE":25,"tk_switch":26,"CASE":27,"tk_while":28,"tk_do":29,"tk_for":30,"PARAMETROFOR":31,"tk_break":32,"tk_continue":33,"tk_return":34,"RETURNVALOR":35,"tk_system":36,"tk_punto":37,"tk_out":38,"tk_print":39,"IMPRIMIR":40,"LISTA_EXP":41,"tk_soloigual":42,"VALOR":43,"MASEXPRESIONES":44,"VARIASDECLA":45,"tk_coma":46,"LISTA_EXPRESIONES":47,"INCYDECRE":48,"tk_else":49,"ELSEIF":50,"tk_case":51,"tk_dospuntos":52,"tk_default":53,"CONDICIONRELACIONAL":54,"RELACIONALES":55,"MASCONDICIONES":56,"LOGICOS":57,"ARITMETICAS":58,"tk_int":59,"tk_double":60,"tk_boolean":61,"tk_char":62,"tk_string":63,"tk_cadena":64,"tk_digito":65,"tk_booleano":66,"tk_caracter":67,"tk_sum":68,"tk_res":69,"tk_mul":70,"tk_div":71,"tk_pot":72,"tk_mod":73,"tk_igual":74,"tk_dif":75,"tk_may":76,"tk_mayIgual":77,"tk_men":78,"tk_menIgual":79,"tk_and":80,"tk_or":81,"tk_not":82,"tk_inc":83,"tk_dec":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"tk_import",7:"tk_id",8:"tk_puntoycoma",9:"tk_class",10:"tk_llavei",12:"tk_llaved",13:"tk_void",14:"tk_pabre",16:"tk_pcierra",23:"tk_if",26:"tk_switch",28:"tk_while",29:"tk_do",30:"tk_for",32:"tk_break",33:"tk_continue",34:"tk_return",36:"tk_system",37:"tk_punto",38:"tk_out",39:"tk_print",42:"tk_soloigual",46:"tk_coma",49:"tk_else",51:"tk_case",52:"tk_dospuntos",53:"tk_default",59:"tk_int",60:"tk_double",61:"tk_boolean",62:"tk_char",63:"tk_string",64:"tk_cadena",65:"tk_digito",66:"tk_booleano",67:"tk_caracter",68:"tk_sum",69:"tk_res",70:"tk_mul",71:"tk_div",72:"tk_pot",73:"tk_mod",74:"tk_igual",75:"tk_dif",76:"tk_may",77:"tk_mayIgual",78:"tk_men",79:"tk_menIgual",80:"tk_and",81:"tk_or",82:"tk_not",83:"tk_inc",84:"tk_dec"},
productions_: [0,[3,2],[4,4],[4,6],[4,0],[11,9],[11,9],[11,0],[17,1],[19,6],[19,3],[19,9],[19,8],[19,8],[19,10],[19,8],[19,3],[19,3],[19,4],[19,10],[19,0],[22,4],[22,4],[22,2],[15,3],[15,0],[45,4],[45,0],[41,2],[41,0],[47,3],[47,0],[35,2],[35,0],[31,8],[25,2],[25,0],[50,3],[50,8],[50,2],[27,5],[27,4],[27,0],[40,2],[40,0],[24,2],[54,3],[54,0],[56,2],[56,0],[44,3],[44,0],[21,3],[21,0],[20,3],[20,0],[18,1],[18,1],[18,1],[18,1],[18,1],[43,1],[43,1],[43,1],[43,1],[43,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[57,1],[57,1],[57,1],[48,1],[48,1],[48,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("fin de cadena"); this.$=new CL_Instruccion.L_Instrucciones("Raiz","Raiz",yylineno); 
                                                                        var L_I = new CNodo_Instruccion.Nodo_Instruccion("Lista Instrucciones","",yylineno); L_I.AgregarHijo($$[$0-1]);
                                                                        this.$.Agregar(L_I); return this.$.ReturnJson();
break;
case 2:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","",yylineno); this.$.Agregar($$[$0]);
                                                                        var Ins= new CNodo_Instruccion.Nodo_Instruccion("import",$$[$0-2],yylineno); this.$.AgregarHijo(Ins);
break;
case 3:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","",yylineno); this.$.Agregar($$[$0]);
                                                                        var Ins = new CNodo_Instruccion.Nodo_Instruccion("class",$$[$0-4],yylineno); this.$.AgregarHijo(Ins); Ins.AgregarHijo($$[$0-2]);
break;
case 5:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Metodo",$$[$0-7],yylineno); this.$.AgregarHijo($$[$0-5]); 
                                                                                                    if($$[$0-5]!=null){$$[$0-5].Agregar($$[$0-2]);}else{ this.$.AgregarHijo($$[$0-2]);} this.$.Agregar($$[$0]);
                                                                                                     
break;
case 6:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Funcion",$$[$0-7],yylineno); this.$.AgregarHijo($$[$0-5]); 
                                                                                                    if($$[$0-5]!=null){$$[$0-5].Agregar($$[$0-2]);}else{ this.$.AgregarHijo($$[$0-2]);} this.$.Agregar($$[$0]);
                                                                                                     
break;
case 8:
if($$[$0]!=null){this.$ = new CNodo_Instruccion.Nodo_Instruccion("Lista Instruccion","",yylineno); this.$.AgregarHijo($$[$0]);} 
break;
case 9:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","Declaracion",yylineno); this.$.AgregarHijo($$[$0-5]); 
                                                                                                                    var tem=new CNodo_Instruccion.Nodo_Instruccion("Identificador",$$[$0-4],yylineno); $$[$0-5].Agregar(tem); tem.Agregar($$[$0-3]);
                                                                                                                    if($$[$0-3]!=null){$$[$0-3].Agregar($$[$0-2]);}else{tem.Agregar($$[$0-2]);} this.$.Agregar($$[$0]);
break;
case 10: case 30:
this.$=$$[$0-1]; this.$.Agregar($$[$0]);
break;
case 11:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","if",yylineno); this.$.AgregarHijo($$[$0-6]); $$[$0-6].Agregar($$[$0-3]); $$[$0-3].Agregar($$[$0-1]); this.$.Agregar($$[$0]); 
break;
case 12:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","switch",yylineno); this.$.AgregarHijo($$[$0-5]); $$[$0-5].Agregar($$[$0-2]); this.$.Agregar($$[$0]);
break;
case 13:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","while",yylineno); this.$.AgregarHijo($$[$0-5]); $$[$0-5].Agregar($$[$0-2]); this.$.Agregar($$[$0]);
break;
case 14:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","do while",yylineno); this.$.AgregarHijo($$[$0-7]);
                                                                                                                    if($$[$0-7]!=null){$$[$0-7].Agregar($$[$0-3]);}else{this.$.AgregarHijo($$[$0-3]);} this.$.Agregar($$[$0]);
break;
case 15:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","for",yylineno); this.$.AgregarHijo($$[$0-5]); $$[$0-5].Agregar($$[$0-2]); this.$.Agregar($$[$0]);
break;
case 16:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Expresion","break",yylineno); this.$.Agregar($$[$0]);
break;
case 17:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Expresion","continue",yylineno); this.$.Agregar($$[$0]);
break;
case 18:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Expresion","return",yylineno); this.$.AgregarHijo($$[$0-2]); this.$.Agregar($$[$0]);
break;
case 19:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","imprimir",yylineno); this.$.Agregar($$[$0]); this.$.AgregarHijo($$[$0-3]);
break;
case 21:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Expresion","Llamar Funcion",yylineno); this.$.AgregarHijo($$[$0-2]);
break;
case 22:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Asignar Valor","",yylineno); this.$.AgregarHijo($$[$0-2]); $$[$0-2].Agregar($$[$0-1]);
break;
case 23: case 39: case 83:
 CL_Error.Errores.add(new CNodoError.Nodo_Error("Sintactico","Se esperaba: "+$$[$0-1],yylineno)); this.$=$$[$0]
break;
case 24:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Parametros","",yylineno); this.$.AgregarHijo($$[$0-2]); 
                                    var nw=new CNodo_Instruccion.Nodo_Instruccion("Identificador",$$[$0-1],yylineno); $$[$0-2].Agregar(nw); nw.Agregar($$[$0]); 
break;
case 26:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Mas Declaraciones","",yylineno); this.$.AgregarHijo($$[$0-2]);
                                            var nw=new CNodo_Instruccion.Nodo_Instruccion("Identificador",$$[$0-1],yylineno); $$[$0-2].Agregar(nw); nw.Agregar($$[$0]);
break;
case 28:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Lista Expresiones","",yylineno); this.$.AgregarHijo($$[$0-1]); $$[$0-1].Agregar($$[$0]); 
break;
case 32:
this.$=$$[$0-1]; $$[$0-1].Agregar($$[$0]);
break;
case 34:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Parametro for","",yylineno); var nid = new CNodo_Instruccion.Nodo_Instruccion("Identificador",$$[$0-6],yylineno); 
                                                                                                                this.$.AgregarHijo($$[$0-7]); $$[$0-7].Agregar(nid); nid.Agregar($$[$0-5]); $$[$0-5].Agregar($$[$0-3]);
                                                                                                                var nid = new CNodo_Instruccion.Nodo_Instruccion("Identificador",$$[$0-1],yylineno); $$[$0-3].Agregar(nid); nid.Agregar($$[$0]);
break;
case 35:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","else",yylineno); this.$.AgregarHijo($$[$0]);
break;
case 37:
this.$=$$[$0-1];
break;
case 38:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","if",yylineno); this.$.AgregarHijo($$[$0-5]); $$[$0-5].Agregar($$[$0-2]); $$[$0-2].Agregar($$[$0]);
break;
case 40:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","case",yylineno); this.$.AgregarHijo($$[$0-1]); this.$.Agregar($$[$0]);
break;
case 41:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Instruccion","default",yylineno); this.$.AgregarHijo($$[$0-1]); this.$.Agregar($$[$0]);
break;
case 43:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Lista Expresion","",yylineno); this.$.AgregarHijo($$[$0-1]); $$[$0-1].Agregar($$[$0]);
break;
case 45:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Condicion","",yylineno); this.$.AgregarHijo($$[$0-1]); $$[$0-1].Agregar($$[$0]);
break;
case 46:
this.$=$$[$0-2]; $$[$0-2].Agregar($$[$0-1]); $$[$0-1].Agregar($$[$0]);
break;
case 48:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Mas Condicion","",yylineno); this.$.AgregarHijo($$[$0-1]); $$[$0-1].Agregar($$[$0]); 
break;
case 50:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Mas Expresiones","",yylineno); this.$.AgregarHijo($$[$0-2]); $$[$0-2].Agregar($$[$0-1]); this.$.Agregar($$[$0]);
break;
case 52:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Asignar Valor","",yylineno); this.$.AgregarHijo($$[$0-1]); $$[$0-1].Agregar($$[$0]);
break;
case 54:
 this.$=new CNodo_Instruccion.Nodo_Instruccion("Mas Identificadores","",yylineno); 
                                var lt= new CNodo_Instruccion.Nodo_Instruccion("Identificador",$$[$0-1],yylineno); this.$.AgregarHijo(lt); lt.Agregar($$[$0]); 
break;
case 56:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Tipo","int",yylineno);
break;
case 57:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Tipo","double",yylineno);
break;
case 58:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Tipo","boolean",yylineno);
break;
case 59:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Tipo","char",yylineno);
break;
case 60:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Tipo","string",yylineno);
break;
case 61:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Expresion","",yylineno);
                            var Exp = new CNodo_Instruccion.Nodo_Instruccion("Primitivo","id: "+$$[$0],yylineno); this.$.AgregarHijo(Exp);
break;
case 62:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Expresion","",yylineno);
                            var Exp = new CNodo_Instruccion.Nodo_Instruccion("Primitivo","cadena",yylineno); this.$.AgregarHijo(Exp);
break;
case 63:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Expresion","",yylineno);
                            var Exp = new CNodo_Instruccion.Nodo_Instruccion("Primitivo","digito: "+$$[$0],yylineno); this.$.AgregarHijo(Exp);
break;
case 64:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Expresion","",yylineno);
                            var Exp = new CNodo_Instruccion.Nodo_Instruccion("Primitivo","booleano: ",yylineno); this.$.AgregarHijo(Exp);
break;
case 65:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Expresion","",yylineno);
                            var Exp = new CNodo_Instruccion.Nodo_Instruccion("Primitivo","caracter",yylineno); this.$.AgregarHijo(Exp);
break;
case 66:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Aritmetica","+",yylineno);
break;
case 67:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Aritmetica","-",yylineno);
break;
case 68:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Aritmetica","*",yylineno);
break;
case 69:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Aritmetica","/",yylineno);
break;
case 70:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Aritmetica","^",yylineno);
break;
case 71:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Aritmetica","%",yylineno);
break;
case 72:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Relacional","==",yylineno);
break;
case 73:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Relacional","!=",yylineno);
break;
case 74:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Relacional",">",yylineno);
break;
case 75:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Relacional",">=",yylineno);
break;
case 76:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Relacional","<",yylineno);
break;
case 77:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Relacional","<=",yylineno);
break;
case 78:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Logico","and",yylineno);
break;
case 79:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Logico","or",yylineno);
break;
case 80:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Logico","not",yylineno);
break;
case 81:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Incremento","++",yylineno);
break;
case 82:
this.$ = new CNodo_Instruccion.Nodo_Instruccion("Decremento","--",yylineno);
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1,9:$V2},{1:[3]},{5:[1,5]},{7:[1,6]},{7:[1,7]},{1:[2,1]},{8:[1,8]},{10:[1,9]},{4:10,5:$V0,6:$V1,9:$V2},{11:11,12:$V3,13:$V4,18:13,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{5:[2,2]},{12:[1,19]},{7:[1,20]},{7:[1,21]},{7:[2,56]},{7:[2,57]},{7:[2,58]},{7:[2,59]},{7:[2,60]},{4:22,5:$V0,6:$V1,9:$V2},{14:[1,23]},{14:[1,24]},{5:[2,3]},{15:25,16:$Va,18:26,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{15:27,16:$Va,18:26,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{16:[1,28]},{7:[1,29]},{16:[1,30]},{10:[1,31]},{16:$Vb,45:32,46:$Vc},{10:[1,34]},{7:$Vd,12:$Ve,17:35,18:37,19:36,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{16:[2,24]},{18:48,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{7:$Vd,12:$Ve,17:49,18:37,19:36,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{12:[1,50]},o($Vo,[2,8]),{7:[1,51]},{2:$Vp,14:$Vq,22:52,42:$Vr},{14:[1,56]},{14:[1,57]},{14:[1,58]},{10:[1,59]},{14:[1,60]},{8:[1,61]},{8:[1,62]},{7:$Vs,8:[2,33],35:63,43:64,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{37:[1,70]},{7:[1,71]},{12:[1,72]},{11:73,12:$V3,13:$V4,18:13,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},o($Vx,$Vy,{20:74,46:$Vz}),o($Vo,$Ve,{18:37,19:76,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{7:$Vs,16:[2,29],41:77,43:78,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{7:$Vs,43:79,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{2:$Vp,14:$Vq,22:80,42:$Vr},{7:$Vs,24:81,43:82,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{7:$Vs,24:83,43:82,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{7:$Vs,24:84,43:82,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{7:$Vd,12:$Ve,17:85,18:37,19:36,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{18:87,31:86,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},o($Vo,$Ve,{18:37,19:88,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),o($Vo,$Ve,{18:37,19:89,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{8:[1,90]},{8:$VA,44:91,58:92,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG},o($VH,[2,61]),o($VH,[2,62]),o($VH,[2,63]),o($VH,[2,64]),o($VH,[2,65]),{38:[1,99]},{16:$Vb,45:100,46:$Vc},{11:101,12:$V3,13:$V4,18:13,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{12:[2,5]},{8:$VI,21:102,42:$VJ},{7:[1,104]},o($Vo,[2,10]),{16:[1,105]},{16:$VK,46:$VL,47:106},{8:$VA,44:108,58:92,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG},o($VM,[2,23]),{16:[1,109]},o($VN,[2,47],{54:110,55:111,74:[1,112],75:[1,113],76:[1,114],77:[1,115],78:[1,116],79:[1,117]}),{16:[1,118]},{16:[1,119]},{12:[1,120]},{16:[1,121]},{7:[1,122]},o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,$Ve,{18:37,19:123,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{8:[2,32]},{7:$Vs,43:124,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VO,[2,66]),o($VO,[2,67]),o($VO,[2,68]),o($VO,[2,69]),o($VO,[2,70]),o($VO,[2,71]),{37:[1,125]},{16:[2,26]},{12:[2,6]},{8:[1,126]},{7:$Vs,43:127,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($Vx,$Vy,{20:128,46:$Vz}),{8:[1,129]},{16:[2,28]},{7:$Vs,43:130,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{8:[1,131]},{10:[1,132]},o($VN,[2,45]),{7:$Vs,43:133,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VO,[2,72]),o($VO,[2,73]),o($VO,[2,74]),o($VO,[2,75]),o($VO,[2,76]),o($VO,[2,77]),{10:[1,134]},{10:[1,135]},{28:[1,136]},{10:[1,137]},{8:$VI,21:138,42:$VJ},o($Vo,[2,18]),o($VN,$VA,{58:92,44:139,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG}),{39:[1,140]},o($Vo,$Ve,{18:37,19:141,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{8:$VA,44:142,58:92,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG},o($Vx,[2,54]),o($VM,[2,21]),{16:$VK,46:$VL,47:143},o($VM,[2,22]),{7:$Vd,12:$Ve,17:144,18:37,19:36,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},o($VN,[2,49],{56:145,57:146,80:[1,147],81:[1,148],82:[1,149]}),{12:$VP,27:150,51:$VQ,53:$VR},{7:$Vd,12:$Ve,17:153,18:37,19:36,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{14:[1,154]},{7:$Vd,12:$Ve,17:155,18:37,19:36,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{8:[1,156]},o($VN,[2,50]),{14:[1,157]},o($Vo,[2,9]),{8:[2,52]},{16:[2,30]},{12:[1,158]},o($VN,[2,46]),{7:$Vs,24:159,43:82,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VO,[2,78]),o($VO,[2,79]),o($VO,[2,80]),{12:[1,160]},{7:$Vs,43:161,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{52:[1,162]},{12:[1,163]},{7:$Vs,24:164,43:82,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{12:[1,165]},{7:$Vs,24:166,43:82,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{7:$Vs,16:[2,44],40:167,43:168,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VM,$VS,{25:169,49:$VT}),o($VN,[2,48]),o($Vo,$Ve,{18:37,19:171,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{52:[1,172]},o($Vo,$Ve,{19:36,18:37,17:173,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),o($Vo,$Ve,{18:37,19:174,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{16:[1,175]},o($Vo,$Ve,{18:37,19:176,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{8:[1,177]},{16:[1,178]},{16:$VA,44:179,58:92,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG},o($Vo,$Ve,{18:37,19:180,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{2:$VU,10:$VV,23:$VW,50:181},o($Vo,[2,12]),o($Vo,$Ve,{19:36,18:37,17:185,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{12:$VP,27:186,51:$VQ,53:$VR},o($Vo,[2,13]),{8:[1,187]},o($Vo,[2,15]),{7:[1,188]},{8:[1,189]},{16:[2,43]},o($Vo,[2,11]),o($VM,[2,35]),{7:$Vd,12:$Ve,17:190,18:37,19:36,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{14:[1,191]},{2:$VU,10:$VV,23:$VW,50:192},{12:$VP,27:193,51:$VQ,53:$VR},{12:[2,41]},o($Vo,$Ve,{18:37,19:194,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{2:$VX,48:195,83:$VY,84:$VZ},o($Vo,$Ve,{18:37,19:199,7:$Vd,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9}),{12:[1,200]},{7:$Vs,24:201,43:82,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VM,[2,39]),{12:[2,40]},o($Vo,[2,14]),{16:[2,34]},{16:[2,81]},{16:[2,82]},{2:$VX,48:202,83:$VY,84:$VZ},o($Vo,[2,19]),o($VM,[2,37]),{16:[1,203]},{16:[2,83]},{10:[1,204]},{7:$Vd,12:$Ve,17:205,18:37,19:36,23:$Vf,26:$Vg,28:$Vh,29:$Vi,30:$Vj,32:$Vk,33:$Vl,34:$Vm,36:$Vn,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9},{12:[1,206]},o($VM,$VS,{25:207,49:$VT}),o($VM,[2,38])],
defaultActions: {5:[2,1],10:[2,2],14:[2,56],15:[2,57],16:[2,58],17:[2,59],18:[2,60],22:[2,3],32:[2,24],73:[2,5],91:[2,32],100:[2,26],101:[2,6],106:[2,28],142:[2,52],143:[2,30],179:[2,43],186:[2,41],193:[2,40],195:[2,34],196:[2,81],197:[2,82],202:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let CNodo_Instruccion=require('../AST/Instrucciones/Nodo_Instruccion');
    let CL_Instruccion=require('../AST/Instrucciones/L_Instrucciones');
    let CL_Error=require('../AST/Errores/L_Error');
    let CNodoError=require('../AST/Errores/Nodo_Error');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una*/
break;
case 1:/*Comentario multilinea*/
break;
case 2:return 59
break;
case 3:return 60
break;
case 4:return 61
break;
case 5:return 62
break;
case 6:return 63
break;
case 7:return 9
break;
case 8:return 6
break;
case 9:return 23
break;
case 10:return 49
break;
case 11:return 26
break;
case 12:return 51
break;
case 13:return 53
break;
case 14:return 28
break;
case 15:return 29
break;
case 16:return 30
break;
case 17:return 33
break;
case 18:return 34
break;
case 19:return 32
break;
case 20:return 13
break;
case 21:return 36
break;
case 22:return 38
break;
case 23:return 39
break;
case 24:return 39
break;
case 25:return 74
break;
case 26:return 75
break;
case 27:return 77
break;
case 28:return 76
break;
case 29:return 79
break;
case 30:return 78 
break;
case 31:return 80
break;
case 32:return 81
break;
case 33:return 82
break;
case 34:return 83
break;
case 35:return 84
break;
case 36:return 10;
break;
case 37:return 12
break;
case 38:return 8
break;
case 39:return 42
break;
case 40:return 14
break;
case 41:return 16
break;
case 42:return 46
break;
case 43:return 52
break;
case 44:return 37
break;
case 45:return 65
break;
case 46:return 66
break;
case 47:return 64
break;
case 48:return 67
break;
case 49:return 7
break;
case 50:return 68
break;
case 51:return 69
break;
case 52:return 70
break;
case 53:return 71
break;
case 54:return 72
break;
case 55:return 73
break;
case 56: /*se ignoran*/ 
break;
case 57:  return 5;   
break;
case 58:CL_Error.Errores.add(new CNodoError.Nodo_Error("Lexico","Caracter no definido: "+yy_.yytext,yy_.yylineno))
break;
}
},
rules: [/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:int|Int\b)/,/^(?:double|Double\b)/,/^(?:boolean|Boolean\b)/,/^(?:char|Char\b)/,/^(?:string|String\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:void\b)/,/^(?:system|System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:[-]?[0-9]+(\.[0-9]+)?)/,/^(?:true|false\b)/,/^(?:[\"]([^\"\n]|(\\"))*[\"])/,/^(?:[\'][a-zA-Z| ][\'])/,/^(?:[a-zA-Z]+([a-zA-Z]|[0-9]|_)*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}